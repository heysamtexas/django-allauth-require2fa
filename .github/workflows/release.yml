name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  id-token: write  # Required for trusted publishing to PyPI

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  pre-release-checks:
    name: Pre-release Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: uv sync --dev

      - name: Run all quality checks
        run: |
          echo "🔍 Running linting..."
          uv run ruff check .
          echo "🎨 Checking formatting..."
          uv run ruff format --check .
          echo "🔒 Running security checks..."
          uv run bandit -r require2fa/ --exclude require2fa/tests/
          echo "🔍 Running type checks..."
          uv run mypy require2fa/

      - name: Run tests
        run: uv run python -m django test require2fa.tests --settings=require2fa.tests.settings --verbosity=2

  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: pre-release-checks
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: uv sync --dev

      - name: Verify version consistency
        run: |
          # Extract version from tag
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "Tag version: $TAG_VERSION"
          
          # Extract version from __init__.py
          INIT_VERSION=$(uv run python -c "import require2fa; print(require2fa.__version__)")
          echo "Package version: $INIT_VERSION"
          
          # Verify versions match
          if [ "$TAG_VERSION" != "$INIT_VERSION" ]; then
            echo "❌ Version mismatch: tag=$TAG_VERSION, package=$INIT_VERSION"
            exit 1
          fi
          echo "✅ Version consistency verified"

      - name: Build package
        run: |
          echo "📦 Building package..."
          uv build
          echo "📋 Package contents:"
          ls -la dist/

      - name: Verify package
        run: |
          echo "🔍 Verifying built package..."
          uv run python -m twine check dist/*

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Use trusted publishing (OIDC) instead of API token
          # Configure at: https://pypi.org/manage/account/publishing/
          print-hash: true
          verify-metadata: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          generate_release_notes: true
          make_latest: true
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          body: |
            🚀 **django-allauth-require2fa v${{ github.ref_name }}** has been released!
            
            ## 📦 Installation
            ```bash
            pip install django-allauth-require2fa==${{ github.ref_name }}
            # or with uv
            uv add django-allauth-require2fa==${{ github.ref_name }}
            ```
            
            ## 📋 Changes
            See the automatically generated release notes below for detailed changes.
            
            ## 🔒 Security
            This package enforces site-wide Two-Factor Authentication for Django applications.
            Always review security-related changes before upgrading.
            
            ---
            🤖 This release was automatically created by GitHub Actions.