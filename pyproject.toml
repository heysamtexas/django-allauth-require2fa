[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "django-require2fa"
dynamic = ["version"]
description = "Site-wide Two-Factor Authentication enforcement middleware for Django applications using django-allauth"
readme = "README.md"
license = "MIT"
requires-python = ">=3.12"
authors = [
    { name = "Django Require2FA Contributors" }
]
keywords = [
    "django",
    "2fa",
    "two-factor",
    "authentication",
    "security",
    "middleware",
    "allauth"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Framework :: Django :: 5.1",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "Django>=4.2",
    "django-allauth>=0.57.0",
    "django-solo>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-django>=4.5.0",
    "pytest-cov>=4.0",
    "ruff>=0.4.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
    "mypy>=1.5.0",
    "django-stubs>=4.2.0",
]

[project.urls]
Homepage = "https://github.com/your-org/django-require2fa"
Documentation = "https://github.com/your-org/django-require2fa#readme"
Repository = "https://github.com/your-org/django-require2fa.git"
Issues = "https://github.com/your-org/django-require2fa/issues"
Changelog = "https://github.com/your-org/django-require2fa/blob/main/CHANGELOG.md"

[tool.hatch.version]
path = "require2fa/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["require2fa"]

[tool.ruff]
target-version = "py312"
line-length = 120
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "DJ",  # flake8-django
    "S",   # bandit security
]
ignore = [
    "E501",  # line too long, handled by formatter
    "S101",  # use of assert (OK in tests)
]

[tool.ruff.per-file-ignores]
"*/tests/*" = ["S101", "ARG002", "S106"]  # Allow assert, unused args, hardcoded passwords in tests
"*/migrations/*" = ["ARG002"]  # Allow unused args in migrations

[tool.ruff.isort]
known-first-party = ["require2fa"]
known-django = ["django"]
section-order = ["future", "standard-library", "third-party", "django", "first-party", "local-folder"]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "tests.settings"
python_files = ["test_*.py", "*_test.py"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=require2fa",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.mypy]
python_version = "3.12"
plugins = ["mypy_django_plugin.main"]
strict = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

[tool.django-stubs]
django_settings_module = "tests.settings"

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101"]  # Skip assert_used test

[tool.coverage.run]
source = ["require2fa"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]